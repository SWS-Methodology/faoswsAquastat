require(data.table)
require(kableExtra)
d = data.table::fread("tables/calculation_rule.csv")
d = d[,.(calculation_rule, indicator_name, component_name)]
knitr::kable(d,
escape = TRUE,
table.attr='class="table-fixed-header"',
caption = paste("Calculation rules in AQUASTAT."),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
require(data.table)
require(kableExtra)
d = data.table::fread("tables/calculation_rule.csv")
d = d[,.(calculation_rule, indicator_name, component_name)]
knitr::kable(d,
escape = TRUE,
table.attr='class="table-fixed-header"',
caption = paste("Calculation rules in AQUASTAT."),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
require(dplyr)
d = readr::read_csv("tables/flagobs.csv")
knitr::kable(x = d,
caption = paste("AQUASTAT to SWS flag conversion"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagobs.csv")
knitr::kable(x = d,
caption = paste("AQUASTAT to SWS flag conversion"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagmeth.csv")
knitr::kable(x = d,
caption = paste("flagObservationStatus - flagMethod combination brought by the faoswsAquastatLegacy module"),
booktabs = TRUE)
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
aquabase [label = 'Dataset: \n SWS aquastat_legacy_corr \n from the faoswsAquastatLegacy module', shape = folder, fillcolor = Beige]
aquaquest [label = 'Dataset: \n SWS aquastat_questionnaire \n from the questionnaire harvester', shape = folder, fillcolor = Beige]
aquaexter [label = 'Dataset: \n SWS aquastat_external \n from the faoswsAquastatExternal module', shape = folder, fillcolor = Beige]
# data tables
refer [label = 'Data table: \n SWS aquastat_reference data table', shape = folder, fillcolor = LightGrey]
calc [label = 'Data table: \n SWS calculation_rule data table', shape = folder, fillcolor = LightGrey]
# processing
Processing [label = 'Processing: \n 1. Harmonize dimensions \n 2. Replace/Update aquastat_legacy_corr \n with aquastat_questionnaire \n and aquastat_external dataset, \n 3. Calculations, \n 4. Imputations, \n 5. Recalculations, \n 6. Flag conversion', shape = square, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n aquastat_update dataset', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_update dataset \n saved in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{aquaquest, aquabase, aquaexter} -> Processing  -> Output -> Save
{refer, calc} -> Processing
}")
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
aquabase [label = 'Dataset: \n SWS aquastat_legacy_corr \n from the faoswsAquastatLegacy module', shape = folder, fillcolor = Beige]
aquaquest [label = 'Dataset: \n SWS aquastat_questionnaire \n from the questionnaire harvester', shape = folder, fillcolor = Beige]
aquaexter [label = 'Dataset: \n SWS aquastat_external \n from the faoswsAquastatExternal module', shape = folder, fillcolor = Beige]
# data tables
refer [label = 'Data table: \n SWS aquastat_reference data table', shape = folder, fillcolor = LightGrey]
calc [label = 'Data table: \n SWS calculation_rule data table', shape = folder, fillcolor = LightGrey]
# processing
Processing [label = 'Processing: \n 1. Harmonize dimensions \n 2. Replace/Update aquastat_legacy_corr \n with aquastat_questionnaire \n and aquastat_external dataset, \n 3. Calculations, \n 4. Imputations, \n 5. Recalculations, \n 6. Flag conversion', shape = square, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n aquastat_update dataset', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_update dataset \n saved in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{aquaquest, aquabase, aquaexter} -> Processing  -> Output -> Save
{refer, calc} -> Processing
}")
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
aquabase [label = 'Dataset: \n SWS aquastat_legacy \n from the faoswsAquastatLegacy module', shape = folder, fillcolor = Beige]
aquaquest [label = 'Dataset: \n SWS aquastat_questionnaire \n from the questionnaire harvester', shape = folder, fillcolor = Beige]
aquaexter [label = 'Dataset: \n SWS aquastat_external \n from the faoswsAquastatExternal module', shape = folder, fillcolor = Beige]
# data tables
refer [label = 'Data table: \n SWS aquastat_reference data table', shape = folder, fillcolor = LightGrey]
calc [label = 'Data table: \n SWS calculation_rule data table', shape = folder, fillcolor = LightGrey]
# processing
Processing [label = 'Processing: \n 1. Harmonize dimensions \n 2. Replace/Update aquastat_legacy \n with aquastat_questionnaire \n and aquastat_external dataset, \n 3. Map out flag of observation, \n 4. Calculation, \n 5. Imputation (LOCF, Linear Interpolation), \n 6. Recalculation, \n 7. Map out flag Method', shape = square, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n aquastat_update dataset', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_update dataset \n saved in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{aquaquest, aquabase, aquaexter} -> Processing  -> Output -> Save
{refer, calc} -> Processing
}")
require(dplyr)
d = readr::read_csv("tables/base_add_indicators.csv")
knitr::kable(x = d,
caption = paste("The new indicators resulting from the faoswsAquastatBaseline module"),
booktabs = TRUE)
require(dplyr)
require(data.table)
d = data.table::fread("tables/map4551.csv")
d <- d[,.(geographicAreaM49_description, count_bef, count_after)]
setnames(d, 'count_bef', 'before_module')
setnames(d, 'count_after','after_module')
knitr::kable(x = d,
caption = paste("Increase in time-series completeness and geographic expansion of SDG 6.4.1 (Water Use Efficiency"),
booktabs = TRUE)
require(dplyr)
require(data.table)
d = data.table::fread("tables/map4550.csv")
d <- d[,.(geographicAreaM49_description, count_bef, count_after)]
setnames(d, 'count_bef', 'before_module')
setnames(d, 'count_after','after_module')
knitr::kable(x = d,
caption = paste("Increase in time-series completeness and geographic expansion of SDG 6.4.2 (Water Stress"),
booktabs = TRUE)
require(dplyr)
require(data.table)
d = data.table::fread("tables/daf4157.csv")
knitr::kable(x = d,
caption = paste("LTA correction in Afghanistan on the element 'Total internal renewable water resources (IRWR) [10^9 m3/year]'"),
booktabs = TRUE)
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
coordination [label = 'Source \n coordination \n between agencies', shape = folder, fillcolor = Beige]
Surveys [label = 'Source \n Country surveys \n and census', shape = folder, fillcolor = Beige]
Literature [label = 'Source \n Literature review', shape = folder, fillcolor = Beige]
focalpoint [label = 'Compilation: \n questionnaire filling \n by AQUASTAT \n national correspondent', shape = folder, fillcolor = Beige]
SWSQH [label = 'Harvester: \n questionnaire harvesting \n by CIO - SWS', fillcolor = LightBlue]
Newdata [label = 'Dataset: \n data harvested from questionnaire \n and SWS compliant', shape = folder, fillcolor = Beige]
QA1 [label = 'QAQC \n Manual Quality control \n of data harvested from questionnaire', fillcolor = PaleGreen]
Newdata_val [label = 'Dataset: \n validated questionnaire data', shape = folder, fillcolor = Beige]
APIsourcing [label = 'Process: \n faoswsAquastatExternal module', fillcolor = PaleGreen]
APIdata [label = 'Dataset: \n AQUASTAT data from external sources', shape = folder, fillcolor = Beige]
oldsystem [label = 'Database: \n Old Aquastat Working System', shape = folder, fillcolor = Beige]
Migration [label = 'Migration: \n legacy data into the SWS \n done by CIO - SWS', fillcolor = LightBlue]
legacydata [label = 'Dataset: \n aquastat_legacy dataset ', shape = folder, fillcolor = Beige]
update [label = 'Process:: \n SWS faoswsAquastatUpdate module: \n 1. merges the questionnaire data, external data, and aquastat_legacy_corr \n 2. flag conversion, \n 3. apply calculations, 4. impute data, 5.  apply recalculation', shape = square, fillcolor = PaleGreen]
updateddata [label = 'Dataset: \n updated aquastat_legacy_corr dataset \n from SWS faoswsAquastatUpdate module ', shape = folder, fillcolor = Beige]
QA2 [label = 'Process: \n Automate Quality control \n by faoswsAquatsatValidation module', fillcolor = PaleGreen]
validationemail [label = 'Dataset: \n Validation output \n sent to the user by email (.csv file)', shape = folder, fillcolor = Beige]
QA3 [label = 'Process: \n Manual Quality control \n of faoswsAquatsatValidation module output', fillcolor = PaleGreen]
validated [label = 'Dataset: \n updated aquastat_legacy_corr \n cleared by technical division', shape = folder, fillcolor = Beige]
AQUASWSdb [label = 'Dataset: \n updated AQUASTAT dataset \n saved in the SWS database', shape = folder, fillcolor = Beige]
Diss [label = 'Dissemination: \n  Web, publications, Apps', shape = folder, fillcolor = LightGrey]
# Flow
# edge definitions with the node IDs
{coordination, Surveys, Literature} -> focalpoint -> SWSQH -> Newdata -> QA1 -> Newdata_val -> update
{oldsystem} -> Migration -> legacydata -> legacydata
{APIsourcing} -> APIdata -> update
{faobaseline} -> update -> updateddata -> QA2 -> validationemail -> QA3 -> validated -> AQUASWSdb -> Diss
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
coordination [label = 'Source \n coordination \n between agencies', shape = folder, fillcolor = Beige]
Surveys [label = 'Source \n Country surveys \n and census', shape = folder, fillcolor = Beige]
Literature [label = 'Source \n Literature review', shape = folder, fillcolor = Beige]
focalpoint [label = 'Compilation: \n questionnaire filling \n by AQUASTAT \n national correspondent', shape = folder, fillcolor = Beige]
SWSQH [label = 'Harvester: \n questionnaire harvesting \n by CIO - SWS', fillcolor = LightBlue]
Newdata [label = 'Dataset: \n data harvested from questionnaire \n and SWS compliant', shape = folder, fillcolor = Beige]
QA1 [label = 'QAQC \n Manual Quality control \n of data harvested from questionnaire', fillcolor = PaleGreen]
Newdata_val [label = 'Dataset: \n validated questionnaire data', shape = folder, fillcolor = Beige]
APIsourcing [label = 'Process: \n faoswsAquastatExternal module', fillcolor = PaleGreen]
APIdata [label = 'Dataset: \n AQUASTAT data from external sources', shape = folder, fillcolor = Beige]
oldsystem [label = 'Database: \n Old Aquastat Working System', shape = folder, fillcolor = Beige]
Migration [label = 'Migration: \n legacy data into the SWS \n done by CIO - SWS', fillcolor = LightBlue]
legacydata [label = 'Dataset: \n aquastat_legacy dataset ', shape = folder, fillcolor = Beige]
update [label = 'Process:: \n SWS faoswsAquastatUpdate module: \n 1. merges the questionnaire data, external data, and aquastat_legacy_corr \n 2. flag conversion, \n 3. apply calculations, 4. impute data, 5.  apply recalculation', shape = square, fillcolor = PaleGreen]
updateddata [label = 'Dataset: \n updated aquastat_legacy_corr dataset \n from SWS faoswsAquastatUpdate module ', shape = folder, fillcolor = Beige]
QA2 [label = 'Process: \n Automate Quality control \n by faoswsAquatsatValidation module', fillcolor = PaleGreen]
validationemail [label = 'Dataset: \n Validation output \n sent to the user by email (.csv file)', shape = folder, fillcolor = Beige]
QA3 [label = 'Process: \n Manual Quality control \n of faoswsAquatsatValidation module output', fillcolor = PaleGreen]
validated [label = 'Dataset: \n updated aquastat_legacy_corr \n cleared by technical division', shape = folder, fillcolor = Beige]
AQUASWSdb [label = 'Dataset: \n updated AQUASTAT dataset \n saved in the SWS database', shape = folder, fillcolor = Beige]
Diss [label = 'Dissemination: \n  Web, publications, Apps', shape = folder, fillcolor = LightGrey]
# Flow
# edge definitions with the node IDs
{coordination, Surveys, Literature} -> focalpoint -> SWSQH -> Newdata -> QA1 -> Newdata_val -> update
{oldsystem} -> Migration -> legacydata -> update
{APIsourcing} -> APIdata -> update
{faobaseline} -> update -> updateddata -> QA2 -> validationemail -> QA3 -> validated -> AQUASWSdb -> Diss
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
coordination [label = 'Source \n coordination \n between agencies', shape = folder, fillcolor = Beige]
Surveys [label = 'Source \n Country surveys \n and census', shape = folder, fillcolor = Beige]
Literature [label = 'Source \n Literature review', shape = folder, fillcolor = Beige]
focalpoint [label = 'Compilation: \n questionnaire filling \n by AQUASTAT \n national correspondent', shape = folder, fillcolor = Beige]
SWSQH [label = 'Harvester: \n questionnaire harvesting \n by CIO - SWS', fillcolor = LightBlue]
Newdata [label = 'Dataset: \n data harvested from questionnaire \n and SWS compliant', shape = folder, fillcolor = Beige]
QA1 [label = 'QAQC \n Manual Quality control \n of data harvested from questionnaire', fillcolor = PaleGreen]
Newdata_val [label = 'Dataset: \n validated questionnaire data', shape = folder, fillcolor = Beige]
APIsourcing [label = 'Process: \n faoswsAquastatExternal module', fillcolor = PaleGreen]
APIdata [label = 'Dataset: \n AQUASTAT data from external sources', shape = folder, fillcolor = Beige]
oldsystem [label = 'Database: \n Old Aquastat Working System', shape = folder, fillcolor = Beige]
Migration [label = 'Migration: \n legacy data into the SWS \n done by CIO - SWS', fillcolor = LightBlue]
legacydata [label = 'Dataset: \n aquastat_legacy dataset ', shape = folder, fillcolor = Beige]
update [label = 'Process:: \n SWS faoswsAquastatUpdate module: \n 1. merges the questionnaire data, external data, and aquastat_legacy_corr \n 2. flag conversion, \n 3. apply calculations, 4. impute data, 5.  apply recalculation', shape = square, fillcolor = PaleGreen]
updateddata [label = 'Dataset: \n updated aquastat_legacy_corr dataset \n from SWS faoswsAquastatUpdate module ', shape = folder, fillcolor = Beige]
QA2 [label = 'Process: \n Automate Quality control \n by faoswsAquatsatValidation module', fillcolor = PaleGreen]
validationemail [label = 'Dataset: \n Validation output \n sent to the user by email (.csv file)', shape = folder, fillcolor = Beige]
QA3 [label = 'Process: \n Manual Quality control \n of faoswsAquatsatValidation module output', fillcolor = PaleGreen]
validated [label = 'Dataset: \n updated aquastat_legacy_corr \n cleared by technical division', shape = folder, fillcolor = Beige]
AQUASWSdb [label = 'Dataset: \n updated AQUASTAT dataset \n saved in the SWS database', shape = folder, fillcolor = Beige]
Diss [label = 'Dissemination: \n  Web, publications, Apps', shape = folder, fillcolor = LightGrey]
# Flow
# edge definitions with the node IDs
{coordination, Surveys, Literature} -> focalpoint -> SWSQH -> Newdata -> QA1 -> Newdata_val -> update
{oldsystem} -> Migration -> legacydata -> update
{APIsourcing} -> APIdata -> update -> update -> updateddata -> QA2 -> validationemail -> QA3 -> validated -> AQUASWSdb -> Diss
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
coordination [label = 'Source \n coordination \n between agencies', shape = folder, fillcolor = Beige]
Surveys [label = 'Source \n Country surveys \n and census', shape = folder, fillcolor = Beige]
Literature [label = 'Source \n Literature review', shape = folder, fillcolor = Beige]
focalpoint [label = 'Compilation: \n questionnaire filling \n by AQUASTAT \n national correspondent', shape = folder, fillcolor = Beige]
SWSQH [label = 'Harvester: \n questionnaire harvesting \n by CIO - SWS', fillcolor = LightBlue]
Newdata [label = 'Dataset: \n data harvested from questionnaire \n and SWS compliant', shape = folder, fillcolor = Beige]
QA1 [label = 'QAQC \n Manual Quality control \n of data harvested from questionnaire', fillcolor = PaleGreen]
Newdata_val [label = 'Dataset: \n validated questionnaire data', shape = folder, fillcolor = Beige]
APIsourcing [label = 'Process: \n faoswsAquastatExternal module', fillcolor = PaleGreen]
APIdata [label = 'Dataset: \n AQUASTAT data from external sources', shape = folder, fillcolor = Beige]
oldsystem [label = 'Database: \n Old Aquastat Working System', shape = folder, fillcolor = Beige]
Migration [label = 'Migration: \n legacy data into the SWS \n done by CIO - SWS', fillcolor = LightBlue]
legacydata [label = 'Dataset: \n aquastat_legacy dataset ', shape = folder, fillcolor = Beige]
update [label = 'Process:: \n SWS faoswsAquastatUpdate module: \n 1. merges the questionnaire data, external data, and aquastat_legacy_corr \n 2. flag conversion, \n 3. apply calculations, 4. impute data, 5.  apply recalculation', shape = square, fillcolor = PaleGreen]
updateddata [label = 'Dataset: \n updated aquastat_legacy_corr dataset \n from SWS faoswsAquastatUpdate module ', shape = folder, fillcolor = Beige]
QA2 [label = 'Process: \n Automate Quality control \n by faoswsAquatsatValidation module', fillcolor = PaleGreen]
validationemail [label = 'Dataset: \n Validation output \n sent to the user by email (.csv file)', shape = folder, fillcolor = Beige]
QA3 [label = 'Process: \n Manual Quality control \n of faoswsAquatsatValidation module output', fillcolor = PaleGreen]
validated [label = 'Dataset: \n updated aquastat_legacy_corr \n cleared by technical division', shape = folder, fillcolor = Beige]
AQUASWSdb [label = 'Dataset: \n updated AQUASTAT dataset \n saved in the SWS database', shape = folder, fillcolor = Beige]
Diss [label = 'Dissemination: \n  Web, publications, Apps', shape = folder, fillcolor = LightGrey]
# Flow
# edge definitions with the node IDs
{coordination, Surveys, Literature} -> focalpoint -> SWSQH -> Newdata -> QA1 -> Newdata_val -> update
{oldsystem} -> Migration -> legacydata -> update
{APIsourcing} -> APIdata -> update -> updateddata -> QA2 -> validationemail -> QA3 -> validated -> AQUASWSdb -> Diss
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
coordination [label = 'Source \n coordination \n between agencies', shape = folder, fillcolor = Beige]
Surveys [label = 'Source \n Country surveys \n and census', shape = folder, fillcolor = Beige]
Literature [label = 'Source \n Literature review', shape = folder, fillcolor = Beige]
focalpoint [label = 'Compilation: \n questionnaire filling \n by AQUASTAT \n national correspondent', shape = folder, fillcolor = Beige]
SWSQH [label = 'Harvester: \n questionnaire harvesting \n by CIO - SWS', fillcolor = LightBlue]
Newdata [label = 'Dataset: \n data harvested from questionnaire \n and SWS compliant', shape = folder, fillcolor = Beige]
QA1 [label = 'QAQC \n Manual Quality control \n of data harvested from questionnaire', fillcolor = PaleGreen]
Newdata_val [label = 'Dataset: \n validated questionnaire data', shape = folder, fillcolor = Beige]
APIsourcing [label = 'Process: \n faoswsAquastatExternal module', fillcolor = PaleGreen]
APIdata [label = 'Dataset: \n AQUASTAT data from external sources', shape = folder, fillcolor = Beige]
oldsystem [label = 'Database: \n Old Aquastat Working System', shape = folder, fillcolor = Beige]
Migration [label = 'Migration: \n legacy data into the SWS \n done by CIO - SWS', fillcolor = LightBlue]
legacydata [label = 'Dataset: \n aquastat_legacy dataset ', shape = folder, fillcolor = Beige]
update [label = 'Process:: \n SWS faoswsAquastatUpdate module: \n 1. merges the questionnaire data, external data, and aquastat_legacy_corr \n 2. flag conversion, \n 3. apply calculations, 4. impute data, 5.  apply recalculation', shape = square, fillcolor = PaleGreen]
updateddata [label = 'Dataset: \n updated aquastat_legacy_corr dataset \n from SWS faoswsAquastatUpdate module ', shape = folder, fillcolor = Beige]
QA2 [label = 'Process: \n Automate Quality control \n by faoswsAquatsatValidation module', fillcolor = PaleGreen]
validationemail [label = 'Dataset: \n Validation output \n sent to the user by email (.csv file)', shape = folder, fillcolor = Beige]
QA3 [label = 'Process: \n Manual Quality control \n of faoswsAquatsatValidation module output', fillcolor = PaleGreen]
validated [label = 'Dataset: \n updated aquastat_legacy_corr \n cleared by technical division', shape = folder, fillcolor = Beige]
AQUASWSdb [label = 'Dataset: \n updated AQUASTAT dataset \n saved in the SWS database', shape = folder, fillcolor = Beige]
Diss [label = 'Dissemination: \n  Web, publications, Apps', shape = folder, fillcolor = LightGrey]
# Flow
# edge definitions with the node IDs
{coordination, Surveys, Literature} -> focalpoint -> SWSQH -> Newdata -> QA1 -> Newdata_val -> update
{oldsystem} -> Migration -> legacydata -> update
{APIsourcing} -> APIdata -> update -> updateddata -> QA2 -> validationemail -> QA3 -> validated -> AQUASWSdb -> Diss
}")
require(dplyr)
d = readr::read_csv("tables/primary_variable.csv")
knitr::kable(x = d,
caption = paste("Indicators which the primary variable rule was applied to after the calculations"),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
require(dplyr)
d = readr::read_csv("tables/flagmeth.csv")
knitr::kable(x = d,
caption = paste("flagObservationStatus - flagMethod combination brought by the faoswsAquastatLegacy module"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagmeth.csv")
knitr::kable(x = d,
caption = paste("flagObservationStatus - flagMethod combination brought by the faoswsAquastatLegacy module"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagmeth.csv")
knitr::kable(x = d,
table.attr='class="table-fixed-header"',
caption = paste("flagObservationStatus - flagMethod combination brought by the faoswsAquastatLegacy module"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagmeth.csv")
knitr::kable(x = d,
table.attr='class="table-fixed-header"',
caption = paste("flagObservationStatus - flagMethod combination brought by the faoswsAquastatUpdate module"),
booktabs = TRUE)%>%
kableExtra::kable_styling(font_size = 12)
require(dplyr)
d = readr::read_csv("tables/flagmeth.csv")
knitr::kable(x = d,
# table.attr='class="table-fixed-header"',
caption = paste("flagObservationStatus - flagMethod combination brought by the faoswsAquastatUpdate module"),
booktabs = TRUE)%>%
kableExtra::kable_styling(font_size = 12)
knitr::include_graphics("images/update_1_to_4.png")
knitr::include_graphics("images/update_1_to_4.png")
knitr::include_graphics("images/update_7.png")
knitr::include_graphics("images/update_7.png")
knitr::include_graphics("images/update_7PNG.png")
knitr::include_graphics("images/update_6.png")
knitr::include_graphics("images/update_6PNG.png")
knitr::include_graphics("images/update_8PNG.png")
knitr::include_graphics("images/update_8.png")
knitr::include_graphics("images/update_9.png")
require(data.table)
require(kableExtra)
d = data.table::fread("tables/aqua_sdg_agg.csv")
knitr::kable(d,
escape = F,
table.attr='class="table-fixed-header"',
caption = "The SWS aqua_sdg_agg data table") %>%
kableExtra::kable_styling(font_size = 12) %>%
scroll_box(width = "100%", height = "500px")
##' AquastatAggregation module
##' Author: Francy Lisboa
##' Date: 08/04/2019
##' Purpose: Aggragates SDG indicators (6.4.1 and 6.4.2) using pre-defined rules by the technical unit
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
library(data.table)
library(dplyr)
library(tidyr)
library(stringr)
library(magrittr)
})
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("~./github/faoswsAquastatAggregation/sws.yml")
Sys.setenv("R_SWS_SHARE_PATH" = SETTINGS[["share"]])
R_SWS_SHARE_PATH = SETTINGS[["share"]]
SetClientFiles(SETTINGS[["certdir"]])
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
if (!CheckDebug()) {
R_SWS_SHARE_PATH = Sys.getenv("R_SWS_SHARE_PATH")
}
# get the data
data <- readRDS(paste0(R_SWS_SHARE_PATH, '/AquastatValidation/output/aquastat_update.rds'))
data[, (colnames(data)) := lapply(.SD, as.character), .SDcols = colnames(data)]
data[, Value := as.numeric(Value)]
data
# Read in data tables for aggregations
aqua_sdg_agg <- ReadDatatable("aqua_sdg_agg")
aqua_sdg_agg[, (colnames(aqua_sdg_agg)) := lapply(.SD, as.character), .SDcols = colnames(aqua_sdg_agg)]
aqua_sdg_agg_4550 <- aqua_sdg_agg[indicator == '4550']
aqua_sdg_agg_4551 <- aqua_sdg_agg[indicator == '4551']
# Get SDG codes and M49 correspondence (from Loos and Waste domain)
cg <- ReadDatatable("a2017regionalgroupings_sdg_feb2017")
cg[, (colnames(cg)) := lapply(.SD, as.character), .SDcols = colnames(cg)]
# Relevant elements
all_elements_4550 <- c(str_trim(unique(unlist(str_split(aqua_sdg_agg_4550$region_el_code, ',')))), unique(aqua_sdg_agg[indicator == '4550']$relevant_el_code))
all_elements_4550 <- all_elements_4550[complete.cases(all_elements_4550)]
all_elements_4551 <- c(str_trim(unique(unlist(str_split(aqua_sdg_agg_4551$region_el_code, ',')))), unique(aqua_sdg_agg[indicator == '4551']$relevant_el_code))
all_elements_4551 <- all_elements_4551[complete.cases(all_elements_4551)]
all_elements_4551
dput(all_elements_4550)
dput(c(all_elements_4550, all_elements_4551))
d = data.table::fread("tables/aquastat_reference.csv")
require(data.table)
require(kableExtra)
rel <- c("4263", "4157", "4549", "4188", "4160", "4162", "4174", "4168",
"4103", "4379", "4250", "4251", "4252", "4253", "4254", "4255",
"4256", "4546", "4547", "4548", "4557", "4558")
d = data.table::fread("tables/aquastat_reference.csv")
d <- d[element_code %in% rel, .(element_code, element_name)]
knitr::kable(d,
escape = F,
table.attr='class="table-fixed-header"',
caption = "The SWS aqua_sdg_agg data table") %>%
kableExtra::kable_styling(font_size = 12) %>%
scroll_box(width = "100%", height = "500px")
data <- GetData(swsContext.datasets[[1]], flags = TRUE)
# get the data
swsContext.executionId
require(data.table)
require(kableExtra)
d = data.table::fread("tables/agg_output.csv")
knitr::kable(d,
escape = F,
table.attr='class="table-fixed-header"',
caption = "Relevant AQUASTAT elements in the aqua_sdg_agg data table") %>%
kableExtra::kable_styling(font_size = 12) %>%
scroll_box(width = "100%", height = "500px")
cg
cg[, .(graphicAreaM49, sdgregion_code, m49_level1_code, m49_level2_code, ldcs_code, lldcssids_code)]
cg[, .(gegraphicAreaM49, sdgregion_code, m49_level1_code, m49_level2_code, ldcs_code, lldcssids_code)]
cg[, .(geographicAreaM49, sdgregion_code, m49_level1_code, m49_level2_code, ldcs_code, lldcssids_code)]
cg[, .(sdgregion_code, m49_level1_code, m49_level2_code, ldcs_code, lldcssids_code)]
cgcsv <- cg[, .(sdgregion_code, m49_level1_code, m49_level2_code, ldcs_code, lldcssids_code)]
write.csv(cgcsv, ~/github/aqua_docs/FrancyJGLisboa.github.io/tables/cgcsv.csv)
write.csv(cgcsv, '~/github/aqua_docs/FrancyJGLisboa.github.io/tables/cgcsv.csv', row.names = FALSE)
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
input [label = 'Dataset: \n aquastat_update', shape = folder, fillcolor = Beige]
# data tables
aquasdg [label = 'Data table: \n aqua_sdg_agg dataset \n with equations for SDG aggregation',  shape = folder, fillcolor = LightGrey]
cgcsv [label = 'Data table: \n a2017regionalgroupings_sdg_feb2017 data \n with sdg reional codes',  shape = folder, fillcolor = LightGrey]
# processing
aggmodule [label = ' Processing: \n faoswsAquastatAggregate using:\n 1. read in aquastat_update dataset from the session, \n 2. extracts information from data tables, \n 3. use information to aggregate SDGs at the regional level, \n 4. Sent the result to the user email', shape = losangle, fillcolor = LightGreen]
# Output
Output [label = 'Dataset: \n aquastat_aggregation \n SDG aggregated data sent to the user', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> aggmodule -> Output
{aquasdg, cgcsv} -> aggmodule
}")
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
input [label = 'Dataset: \n aquastat_update', shape = folder, fillcolor = Beige]
# data tables
aquasdg [label = 'Data table: \n aqua_sdg_agg dataset \n with equations for SDG aggregation',  shape = folder, fillcolor = LightGrey]
cgcsv [label = 'Data table: \n a2017regionalgroupings_sdg_feb2017 data \n with sdg reional codes',  shape = folder, fillcolor = LightGrey]
# processing
aggmodule [label = ' Processing: \n faoswsAquastatAggregate using:\n 1. read in aquastat_update dataset from the session, \n 2. extracts information from data tables, \n 3. use information to aggregate SDGs at the regional level, \n 4. Sent the result to the user email', shape = losangle, fillcolor = PaleGreen]
# Output
Output [label = 'Dataset: \n aquastat_aggregation \n SDG aggregated data sent to the user', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> aggmodule -> Output
{aquasdg, cgcsv} -> aggmodule
}")
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
input [label = 'Dataset: \n aquastat_update', shape = folder, fillcolor = Beige]
# data tables
aquasdg [label = 'Data table: \n aqua_sdg_agg dataset \n with equations for SDG aggregation',  shape = folder, fillcolor = LightGrey]
cgcsv [label = 'Data table: \n a2017regionalgroupings_sdg_feb2017 data \n with sdg reional codes',  shape = folder, fillcolor = LightGrey]
# processing
aggmodule [label = ' Processing: \n faoswsAquastatAggregate using:\n 1. read in aquastat_update dataset from the session, \n 2. extracts information from data tables, \n 3. use information to aggregate SDGs at the regional level, \n 4. Sent the result to the user email', shape = losangle, fillcolor = PaleGreen]
# Output
Output [label = 'Dataset: \n aquastat_aggregation \n SDG aggregated data sent to the user', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{input} -> aggmodule -> Output
{aquasdg, cgcsv} -> aggmodule
}")
require(data.table)
require(kableExtra)
d = data.table::fread("tables/agg_output.csv")
knitr::kable(d,
# escape = F,
# table.attr='class="table-fixed-header"',
caption = "Relevant AQUASTAT elements in the aqua_sdg_agg data table") %>%
kableExtra::kable_styling(font_size = 12) %>%
scroll_box(width = "100%", height = "500px")
require(data.table)
require(kableExtra)
d = data.table::fread("tables/agg_output.csv")
knitr::kable(d,
# escape = F,
# table.attr='class="table-fixed-header"',
caption = "Relevant AQUASTAT elements in the aqua_sdg_agg data table") %>%
kableExtra::kable_styling(font_size = 12) %>%
scroll_box(width = "100%", height = "500px")
