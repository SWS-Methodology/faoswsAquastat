} else if (ncol(x) == 2) {
x <- x[, 1:2]
} else {
fixed <- x[, 1:2]
imputable <- x[, 3:ncol(x)]
imputed <- imputeTS::na.interpolation(imputable)
x <- cbind(fixed, imputed)
}})
# RECOMBINATION OF DATASETS -----
# recombination within countries
recombined01 <- plyr::mlply(unique(d$geographicAreaM49), .fun = function(x) {
dplyr::full_join(l1_values[[x]], l2_imputed_values[[x]]) %>%
dplyr::full_join(l4_imputed_values[[x]]) %>%
dplyr::full_join(l5_imputed_values[[x]])
})
# within each country, get the long format
l_long_format <- lapply(recombined01, function(x) {
data.table::melt(x , c("geographicAreaM49", "timePointYears"),
variable.name = "aquastatElement",
value.name = "Value", variable.factor = FALSE)
})
# recombination among countries
recombined_dt <- as.data.frame(data.table::rbindlist(l_long_format))
filtering <- dplyr::left_join(dtt, recombined_dt, by = c("geographicAreaM49", "aquastatElement", "timePointYears"))
fixing_step01 <- dplyr::mutate(filtering, aquastatElement = substring(aquastatElement, 7))
fixing_step02 <- dplyr::mutate(fixing_step01, imputed = ifelse(is.na(Value.x) & !is.na(Value.y), "I", "O"))
fixing_step03 <- dplyr::mutate(fixing_step02, flagAquastat = ifelse(imputed == "I", "I", flagAquastat))
fixing_step04 <- dplyr::rename(fixing_step03, Value = Value.y) %>%  dplyr::select(geographicAreaM49, aquastatElement, timePointYears, Value, flagAquastat)
fixing_step04
data_to_save <- data.table::setDT(fixing_step04)[!is.na(Value)]
dim(data_to_save)
dim(d)
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
library(dplyr)
library(tidyr)
library(stringr)
library(magrittr)
library(data.table)
})
R_SWS_SHARE_PATH = Sys.getenv("R_SWS_SHARE_PATH")
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("modules/faoswsAquastatImputation/sws.yml")
## If you're not on the system, your settings will overwrite any others
R_SWS_SHARE_PATH = SETTINGS[["share"]]
## Define where your certificates are stored
SetClientFiles(SETTINGS[["certdir"]])
## Get session information from SWS. Token must be obtained from web interface
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
# The aquastat_imputed dataset in SWS is the starting point of this module
imputKey <- DatasetKey(
domain = "Aquastat",
dataset = "aquastat_imputed",
dimensions = list(
Dimension(name = "geographicAreaM49",
keys = GetCodeList('Aquastat', 'aquastat_imputed', 'geographicAreaM49')[type == 'country', code]),
Dimension(name = "aquastatElement", keys = GetCodeList('Aquastat', 'aquastat_imputed', 'aquastatElement')[, code]),
Dimension(name = "timePointYears", keys = as.character(1961:2017))
)
)
imputKey
raw_imputed <- GetData(imputKey, flags = TRUE)
dim(raw_imputed)
dim(data_to_save)
length(unique(raw_imputed$aquastatElement))
length(unique(data_to_save$aquastatElement))
setdiff(unique(data_to_save$aquastatElement), unique(raw_data$aquastatElement))
setdiff(unique(data_to_save$aquastatElement), unique(raw_imputed$aquastatElement))
data_to_save[aquastatElement == 4178]
data_to_save[aquastatElement == 4178 & Value > 0]
keys = GetCodeList('Aquastat', 'aquastat_imputed', 'aquastatElement')[, code])
keys = GetCodeList('Aquastat', 'aquastat_imputed', 'aquastatElement')
keys
keys[code == 4178]
raw_imputed[geographicAreaM49 == 4 & aquastatElement == 4104]
raw_imputed[geographicAreaM49 == 4 & aquastatElement == 4155]
raw_imputed[geographicAreaM49 == 8 & aquastatElement == 4178]
raw_imputed[geographicAreaM49 == 8]
##' faoswsAquastatImputation exercise
##' Author: Francy Lisboa
##' Date: 01/08/2018
##' Purpose: this module perfoms the imputation of Aquastat elements using a split-apply-combine approach.
##'
##' In the raw data the time-series of country-element combinations are expanded with the first and last years as boundaries.
##'
##' Then, at the country level, data is subdivided into five mutually exclusive dataframes containing different sets of elements
##'
##' Each dataframe has the dimensions geographicAreaM49, timePointYears and the selected elements. The selection criteria was:
##' Dataframe 1-Elements whose time-series is totally empty.
##' Dataframe 2-Elements whose time-series is totally full  - zero variance and no missing values.
##' Dataframe 3-Elements whose time-series has only one observed value
##' Dataframe 4-Elements whose time-series has zero variance and at least one missisng value
##' Dataframe 5-Elements whose time-series has nonzero variance and at least one missing value
##'
##' The last observation carried forward/backwards method is applied to the dataframes 3 and 4
##' The linear interpolation method is applied to to dataframe 5
##'
##' The five dataframes are recombined into a single resulting in a long format dataset with geographicAreaM49, timePointYears, aquastatElement, Value, and flagAquastat.
##' This data is saved in the SWS as aquastat_imputed.
##'
##'
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
library(dplyr)
library(tidyr)
library(stringr)
library(magrittr)
library(data.table)
library(imputeTS)
})
R_SWS_SHARE_PATH = Sys.getenv("R_SWS_SHARE_PATH")
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("modules/faoswsAquastatImputation/sws.yml")
## If you're not on the system, your settings will overwrite any others
R_SWS_SHARE_PATH = SETTINGS[["share"]]
## Define where your certificates are stored
SetClientFiles(SETTINGS[["certdir"]])
## Get session information from SWS. Token must be obtained from web interface
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
# Therefore, the session is the one of the aquastat_imputed dataset
imputKey <- DatasetKey(
domain = "Aquastat",
dataset = "aquastat_dan",
dimensions = list(
Dimension(name = "geographicAreaM49",
keys = GetCodeList('Aquastat', 'aquastat_dan', 'geographicAreaM49')[type == 'country', code]),
Dimension(name = "aquastatElement", keys = GetCodeList('Aquastat', 'aquastat_dan', 'aquastatElement')[, code]),
Dimension(name = "timePointYears", keys = as.character(1961:2017))
)
)
imputKey
# get the data from the input
d <- GetData(imputKey, flags = TRUE)
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
library(dplyr)
library(tidyr)
library(stringr)
library(magrittr)
library(data.table)
})
R_SWS_SHARE_PATH = Sys.getenv("R_SWS_SHARE_PATH")
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("modules/faoswsAquastatImputation/sws.yml")
## If you're not on the system, your settings will overwrite any others
R_SWS_SHARE_PATH = SETTINGS[["share"]]
## Define where your certificates are stored
SetClientFiles(SETTINGS[["certdir"]])
## Get session information from SWS. Token must be obtained from web interface
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
# The aquastat_imputed dataset in SWS is the starting point of this module
imputKey <- DatasetKey(
domain = "Aquastat",
dataset = "aquastat_imputed",
dimensions = list(
Dimension(name = "geographicAreaM49",
keys = GetCodeList('Aquastat', 'aquastat_imputed', 'geographicAreaM49')[type == 'country', code]),
Dimension(name = "aquastatElement", keys = GetCodeList('Aquastat', 'aquastat_imputed', 'aquastatElement')[, code]),
Dimension(name = "timePointYears", keys = as.character(1961:2017))
)
)
# get the data from the input
raw_imputed <- GetData(imputKey, flags = TRUE)
raw_imputed
raw_imputed[aquastatElement == 4178]
##' faoswsAquastatImputation exercise
##' Author: Francy Lisboa
##' Date: 01/08/2018
##' Purpose: this module perfoms the imputation of Aquastat elements using a split-apply-combine approach.
##'
##' In the raw data the time-series of country-element combinations are expanded with the first and last years as boundaries.
##'
##' Then, at the country level, data is subdivided into five mutually exclusive dataframes containing different sets of elements
##'
##' Each dataframe has the dimensions geographicAreaM49, timePointYears and the selected elements. The selection criteria was:
##' Dataframe 1-Elements whose time-series is totally empty.
##' Dataframe 2-Elements whose time-series is totally full  - zero variance and no missing values.
##' Dataframe 3-Elements whose time-series has only one observed value
##' Dataframe 4-Elements whose time-series has zero variance and at least one missisng value
##' Dataframe 5-Elements whose time-series has nonzero variance and at least one missing value
##'
##' The last observation carried forward/backwards method is applied to the dataframes 3 and 4
##' The linear interpolation method is applied to to dataframe 5
##'
##' The five dataframes are recombined into a single resulting in a long format dataset with geographicAreaM49, timePointYears, aquastatElement, Value, and flagAquastat.
##' This data is saved in the SWS as aquastat_imputed.
##'
##'
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
library(dplyr)
library(tidyr)
library(stringr)
library(magrittr)
library(data.table)
library(imputeTS)
})
R_SWS_SHARE_PATH = Sys.getenv("R_SWS_SHARE_PATH")
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("modules/faoswsAquastatImputation/sws.yml")
## If you're not on the system, your settings will overwrite any others
R_SWS_SHARE_PATH = SETTINGS[["share"]]
## Define where your certificates are stored
SetClientFiles(SETTINGS[["certdir"]])
## Get session information from SWS. Token must be obtained from web interface
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
# The input data reside in the aquastat_clone dataset in SWS
# The modules works with this data and save the data in the aquastat_imputed dataset.
# Therefore, the session is the one of the aquastat_imputed dataset
imputKey <- DatasetKey(
domain = "Aquastat",
dataset = "aquastat_dan",
dimensions = list(
Dimension(name = "geographicAreaM49",
keys = GetCodeList('Aquastat', 'aquastat_dan', 'geographicAreaM49')[type == 'country', code]),
Dimension(name = "aquastatElement", keys = GetCodeList('Aquastat', 'aquastat_dan', 'aquastatElement')[, code]),
Dimension(name = "timePointYears", keys = as.character(1961:2017))
)
)
# get the data from the input
d <- GetData(imputKey, flags = TRUE)
dim(d)
unique(d$flagAquastat)
unique(d$aquastatElement)
dim(d)
dim(raw_imputed)
dim(data_to_save)
93321+34798
125879-93321
32558/93321
library(dplyr)
library(data.table)
definitions <- read_csv("~./github/Aquastat/AquastatDefinition.csv")
library(dplyr)
library(tidyr)
library(data.table)
definitions <- read_csv("~./github/Aquastat/AquastatDefinition.csv")
library(readr)
definitions <- read_csv("~./github/Aquastat/AquastatDefinition.csv")
definitions <- read_csv("~./github/Aquastat/AquastatDefinitions.csv")
definitions
definitions <- read_csv("~./github/Aquastat/AquastatDefinitions.csv")[, -3]
definitions
flags_guideline <- read_csv("~./github/Aquastat/aquastat_ref_table.csv")
flags_guideline
definitions$aquastatElement %in% flags_guideline$aquastatElement
setdiff(definitions$aquastatElement,flags_guideline$aquastatElement)
pending_flags <- c(4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557)
element_diff <- setdiff(definitions$aquastatElement,flags_guideline$aquastatElement)
discontinued <- !(element_diff %in% pending_flags)
discontinued
discontinued <- setdiff(element_diff, pending_flags)
discontinued
definitions_preproc <- dplyr::filter(definitions, !(aquastatElement %in% discontinued))
definitions_preproc
definitions
definitions_preproc <- dplyr::filter(definitions, !(aquastatElement %in% element_diff))
definitions_preproc
definitions_preproc
left_join(definitions_preproc, flags_guideline)
meta_df$aquastatElement == 4263
# merging data
meta_df <- left_join(definitions_preproc, flags_guideline)
meta_df$aquastatElement == 4263
source('~/.active-rstudio-document', echo=TRUE)
metrics <
meta_df %>%
summarise(elements = n())
metrics <
meta_df %>%
summarise(elements = n())
metrics <-
meta_df %>%
summarise(elements = n())
metrics
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_calculated = sum(aquastatElement == "C"))
metrics
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_disseminated = sum(diss == "D"))
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_disseminated = sum(Diss == "D"))
metrics
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_disseminated = sum(Diss == "D"),
total_non_disseminated = total_elements - total_disseminated)
metrics
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_diss = sum(Diss == "D"),
total_non_diss = total_elements - total_diss,
share_diss = (total_diss/total_elements)*100)
metrics
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_diss = sum(Diss == "D"),
total_non_diss = total_elements - total_diss,
share_diss = (total_diss/total_elements)*100,
share_non_diss = 1-share_diss,
total_calc = sum(Calculated == "C"),
total_primary = total_elements - total_calc)
metrics
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_diss = sum(Diss == "D"),
total_non_diss = total_elements - total_diss,
share_diss = (total_diss/total_elements)*100,
share_non_diss = 100-share_diss,
total_calc = sum(Calculated == "C"),
total_primary = total_elements - total_calc)
metrics
##' Aquastat overview praparation
##' Francy Lisboa
##'
##'
##'
##'
library(dplyr)
library(tidyr)
library(readr)
library(data.table)
definitions <- read_csv("~./github/Aquastat/AquastatDefinitions.csv")[, -3]
flags_guideline <- read_csv("~./github/Aquastat/aquastat_ref_table.csv")
element_diff <- setdiff(definitions$aquastatElement,flags_guideline$aquastatElement)
pending_flags <- c(4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557)
discontinued <- setdiff(element_diff, pending_flags)
# harmonizing definitions and flags guideline
definitions_preproc <- dplyr::filter(definitions, !(aquastatElement %in% element_diff))
# merging data
meta_df <- left_join(definitions_preproc, flags_guideline)
# Calculating some statistics
# Number of calculated variables
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_diss = sum(Diss == "D"),
total_non_diss = total_elements - total_diss,
share_diss = (total_diss/total_elements)*100,
share_non_diss = 100-share_diss,
total_calc = sum(Calculated == "C"),
total_primary = total_elements - total_calc)
metrics
library(dplyr)
library(tidyr)
library(readr)
library(data.table)
definitions <- read_csv("~./github/Aquastat/AquastatDefinitions.csv")[, -3]
flags_guideline <- read_csv("~./github/Aquastat/aquastat_ref_table.csv")
element_diff <- setdiff(definitions$aquastatElement,flags_guideline$aquastatElement)
pending_flags <- c(4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557)
discontinued <- setdiff(element_diff, pending_flags)
# harmonizing definitions and flags guideline
definitions_preproc <- dplyr::filter(definitions, !(aquastatElement %in% discontinued))
# merging data
meta_df <- left_join(definitions_preproc, flags_guideline)
# Calculating some statistics
# Number of calculated variables
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_diss = sum(Diss == "D"),
total_non_diss = total_elements - total_diss,
share_diss = (total_diss/total_elements)*100,
share_non_diss = 100-share_diss,
total_calc = sum(Calculated == "C"),
total_primary = total_elements - total_calc)
library(dplyr)
library(tidyr)
library(readr)
library(data.table)
definitions <- read_csv("~./github/Aquastat/AquastatDefinitions.csv")[, -3]
flags_guideline <- read_csv("~./github/Aquastat/aquastat_ref_table.csv")
element_diff <- setdiff(definitions$aquastatElement,flags_guideline$aquastatElement)
pending_flags <- c(4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557)
discontinued <- setdiff(element_diff, pending_flags)
# harmonizing definitions and flags guideline
definitions_preproc <- dplyr::filter(definitions, !(aquastatElement %in% discontinued))
# merging data
meta_df <- left_join(definitions_preproc, flags_guideline)
# Calculating some statistics
# Number of calculated variables
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_diss = sum(Diss == "D"),
total_non_diss = total_elements - total_diss,
share_diss = (total_diss/total_elements)*100,
share_non_diss = 100-share_diss,
total_calc = sum(Calculated == "C"),
total_primary = total_elements - total_calc)
metrics
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_diss = sum(Diss == "D"),
total_non_diss = total_elements - total_diss,
share_diss = (total_diss/total_elements)*100,
share_non_diss = 100-share_diss,
total_calc = sum(Calculated == "C"),
total_primary = total_elements - total_calc,
share_calc = (total_calc/total_elements)*100,
total_by_aquastat = sum(Source == "A"),
total_other_agencies = sum(Source == "O"),
total_calculated = total_elements - (total_by_aquastat + total_other_agencies))
metrics
View(metrics)
metrics_within_dissemination <-
meta_df %>%
group_by(Diss)
summarise(total_diss = n(),
total_calc = sum(Calculated == "C"),
share_calc = (total_calc/total_diss)*100)
metrics_within_dissemination <-
meta_df %>%
group_by(Diss)
summarise(total_calc = sum(Calculated == "C"),
share_calc = (total_calc/193)*100,
total_calc = sum(Calculate == "V"),
share_calc = (total_calc/216)*100
metrics_within_dissemination <-
meta_df %>%
group_by(Diss)
summarise(total_calc = sum(Calculated == "C"),
share_calc = (total_calc/193)*100,
total_calc = sum(Calculate == "V"),
share_calc = (total_calc/216)*100)
metrics_within_dissemination <-
meta_df %>%
group_by(Diss)
summarise(total_calc = sum(Calculated == "C"),
share_calc = (total_calc/193)*100,
total_calc = sum(Calculate == "V"),
share_calc = (total_calc/216)*100)
metrics_within_dissemination <-
meta_df %>%
group_by(Diss)
summarise(total_calc = sum(Calculated == "C"),
share_calc = (total_calc/193)*100,
total_calc = sum(Calculate == "V"),
share_calc = (total_calc/216)*100)
metrics_within_dissemination <-
meta_df %>%
group_by(Diss) %>%
summarise(total_calc = sum(Calculated == "C"),
share_calc = (total_calc/193)*100,
total_calc = sum(Calculate == "V"),
share_calc = (total_calc/216)*100)
metrics_within_dissemination <-
meta_df %>%
group_by(Diss) %>%
summarise(total_calc = sum(Calculated == "C"),
share_calc = (total_calc/193)*100,
total_calc = sum(Calculated == "V"),
share_calc = (total_calc/216)*100)
metrics_within_dissemination
metrics <-
meta_df %>%
summarise(total_elements = n(),
total_diss = sum(Diss == "D"),
total_non_diss = total_elements - total_diss,
share_diss = (total_diss/total_elements)*100,
share_non_diss = 100-share_diss,
total_calc = sum(Calculated == "C"),
total_primary = total_elements - total_calc,
share_calc = (total_calc/total_elements)*100,
total_by_aquastat = sum(Source == "A"),
total_other_agencies = sum(Source == "O"),
total_calculated = total_elements - (total_by_aquastat + total_other_agencies),
calc_within_diss = sum(Calculated == "C" & Diss == "D"))
meta_df
# merging data
meta_df <- left_join(definitions_preproc, flags_guideline)[, -3]
meta_df
# merging data
aquastat_meta_df <- left_join(definitions_preproc, flags_guideline)[, -3]
write.csv("~./github/Aquastat/aquastat_meta_df.csv", row.names = FALSE)
write.csv(aquastat_meta_df,"~./github/Aquastat/aquastat_meta_df.csv", row.names = FALSE)
